#!/bin/bash
#############
## Specifics
##
DEP=(modules)
PACKAGE="<BOOST>"

#####
# Set the operating system allowed to build this module
#
ARCH=(Darwin Linux)

#####
# Setting any of these variables to 'false' effectively skips that step
# This is useful for items like 'autojump' which requires a git clone/checkout
DOWNLOAD='http://mooseframework.org/source_packages/<BOOST>.tar.gz'
EXTRACT='<BOOST>.tar.gz'
CONFIGURE='false'
BUILD='false'
INSTALL='false'

pre_run() {
    ./bootstrap.sh --prefix="$PACKAGES_DIR/<BOOST>"
    if [ $? -ne 0 ]; then echo 'Failed to run bootstrap.sh for $ME'; cleanup 1; fi
    ./b2 install -j $MOOSE_JOBS
    if [ $? -ne 0 ]; then echo 'Failed to build $ME'; cleanup 1; fi
}

post_run() {
    cat <<EOF > "$PACKAGES_DIR/Modules/<MODULES>/adv_modules/$PACKAGE"
#%Module1.0#####################################################################
##
## <BOOST> Module file
##
##
##
set BASE_PATH       "$PACKAGES_DIR"
prepend-path        PATH       "\$BASE_PATH/<BOOST>/bin"
setenv              BOOST_DIR  "\$BASE_PATH/<BOOST>"
EOF
}
##
## End Specifics
##############
## The following script contains all the common functions.
## Those functions are executed in the following order:

# download
# extract
# pre-run
# configure
# make
# make install
# post_run
# cleanup

## pre_run and post_run are the only true specifics that are different
## with every package
PACKAGES_DIR="<PACKAGES_DIR>"
RELATIVE_DIR="<RELATIVE_DIR>"
DOWNLOAD_DIR="<DOWNLOAD_DIR>"
TEMP_PREFIX="<TEMP_PREFIX>"
MOOSE_JOBS=<MOOSE_JOBS>
KEEP_FAILED=<KEEP_FAILED>
source "$RELATIVE_DIR/functions" $@
