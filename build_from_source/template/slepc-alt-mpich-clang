#!/bin/bash
#############
## Specifics
##
DEP=(petsc-alt-mpich-clang-opt)
PACKAGE='<SLEPC_ALT>-mpich-clang'

#####
# Set the operating system allowed to build this module
#
ARCH=(Darwin Linux)

#####
# Setting any of these variables to 'false' effectively skips that step
# This is useful for items like 'autojump' which requires a git clone/checkout
DOWNLOAD='http://mooseframework.org/source_packages/<SLEPC_ALT>.tar.gz'
EXTRACT='<SLEPC_ALT>.tar.gz'
CONFIGURE="./configure --prefix=$PACKAGES_DIR/slepc/$PACKAGE"
BUILD='false'
INSTALL='false'

pre_run() {
    if [ -d $PACKAGES_DIR/slepc/$PACKAGE ]; then
	rm -rf $PACKAGES_DIR/slepc/$PACKAGE
    fi
    unset MODULEPATH
    source $PACKAGES_DIR/Modules/<MODULES>/init/bash
    module load civet/.civet mpich-clang-petsc_alt-slepc
}

post_run() {
    make SLEPC_DIR=`pwd` PETSC_DIR=$PETSC_DIR
    if [ $? -ne 0 ]; then echo 'Failed to make '$PACKAGE; cleanup 1; fi
    make SLEPC_DIR=`pwd` PETSC_DIR=$PETSC_DIR install
    if [ $? -ne 0 ]; then echo 'Failed to make install '$PACKAGE; cleanup 1; fi
    make SLEPC_DIR=$PACKAGES_DIR/slepc/$PACKAGE PETSC_DIR=$PETSC_DIR PETSC_ARCH="" test
    if [ $? -ne 0 ]; then echo 'Failed to make test '$PACKAGE; cleanup 1; fi

    cat <<EOF > $PACKAGES_DIR/Modules/<MODULES>/modulefiles/moose/.mpich_<SLEPC_ALT>-clang
#%Module1.0#####################################################################
##
## <SLEPC_ALT> modulefile
##
##
##
set         BASE_PATH        $PACKAGES_DIR
setenv      SLEPC_DIR        \$BASE_PATH/slepc/$PACKAGE
EOF
    cd $PACKAGES_DIR/Modules/<MODULES>/mpich_clang
    ln -s ../modulefiles/moose/.mpich_<SLEPC_ALT>-clang <SLEPC_ALT>
}

##
## End Specifics
##############
## The following script contains all the common functions.
## Those functions are executed in the following order:

# download
# extract
# pre-run `pwd`
# configure
# make
# make install
# post_run `pwd`
# cleanup

## pre_run and post_run are the only true specifics that are different
## with every package
source $RELATIVE_DIR/functions
